var _0x16c97b=(function(){var _0x109a4d=!![];return function(_0xa117e3,_0x432e4d){var _0x4ae798=_0x109a4d?function(){if(_0x432e4d){var _0x240563=_0x432e4d['apply'](_0xa117e3,arguments);return _0x432e4d=null,_0x240563;}}:function(){};return _0x109a4d=![],_0x4ae798;};}()),_0x2e0bb0=_0x16c97b(this,function(){return _0x2e0bb0['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](_0x2e0bb0)['search']('(((.+)+)+)+$');});_0x2e0bb0();export default'\x0a#ifdef\x20BRDF\x0a#define\x20RECIPROCAL_PI\x200.31830988618\x0a#define\x20M_PI\x203.141592653589793\x0a#define\x20EPSILON\x201e-6\x0a#define\x20CUBEUV_MAX_MIP\x208.0\x0a#define\x20CUBEUV_TEXEL_WIDTH\x200.0013020833333333333\x0a#define\x20CUBEUV_TEXEL_HEIGHT\x200.0009765625\x0a#define\x20saturate(a)\x20clamp(\x20a,\x200.0,\x201.0\x20)\x0afloat\x20pow2(\x20const\x20in\x20float\x20x\x20)\x20{\x20return\x20x\x20*\x20x;\x20}\x0a\x0auniform\x20vec4\x20uBaseColorFactor;\x0auniform\x20vec4\x20uEmissiveFactor;\x0auniform\x20float\x20uMetallicFactor;\x0auniform\x20float\x20uRoughnessFactor;\x0auniform\x20float\x20uAlphaCutoff;\x0a\x0astruct\x20IncidentLight\x20{\x0a\x20\x20\x20\x20vec3\x20direction;\x0a\x20\x20\x20\x20vec3\x20color;\x0a\x20\x20\x20\x20bool\x20visible;\x0a};\x0a\x0astruct\x20GeometricContext\x20{\x0a\x20\x20\x20\x20vec3\x20position;\x0a\x20\x20\x20\x20vec3\x20normal;\x0a\x20\x20\x20\x20vec3\x20viewDir;\x0a};\x0a\x0astruct\x20PhysicalMaterial\x20{\x0a\x20\x20\x20\x20vec3\x09diffuseColor;\x0a\x20\x20\x20\x20float\x09roughness;\x0a\x20\x20\x20\x20vec3\x09specularColor;\x0a\x20\x20\x20\x20float\x20specularF90;\x0a};\x0a\x0astruct\x20ReflectedLight\x20{\x0a\x20\x20\x20\x20vec3\x20directDiffuse;\x0a\x20\x20\x20\x20vec3\x20directSpecular;\x0a\x20\x20\x20\x20vec3\x20indirectDiffuse;\x0a\x20\x20\x20\x20vec3\x20indirectSpecular;\x0a};\x0a\x0a#ifdef\x20HAS_BASE_TEXTURE\x0a\x20\x20\x20\x20uniform\x20sampler2D\x20uBaseTexture;\x0a#endif\x0a\x0a#ifdef\x20HAS_NORMAL_TEXTURE\x0a\x20\x20\x20\x20uniform\x20sampler2D\x20uNormalTexture;\x0a\x20\x20\x20\x20uniform\x20float\x20uNormalTextureScale;\x0a#ifdef\x20HAS_ANISOTROPY\x0a\x20\x20\x20\x20uniform\x20vec4\x20uAnisotropy;\x0a#endif\x0a#endif\x0a\x0a#ifdef\x20HAS_EMISSIVE_TEXTURE\x0a\x20\x20\x20\x20uniform\x20sampler2D\x20uEmissionTexture;\x0a\x20\x20\x20\x20uniform\x20vec4\x20uEmissiveUVOffsetAndTiling;\x0a#endif\x0a\x0a#ifdef\x20HAS_MetallicRoughness_TEXTURE\x0a\x20\x20\x20\x20uniform\x20sampler2D\x20uMetallicRoughnessTexture;\x0a#endif\x0a\x0a#ifdef\x20HAS_OCCLUSION_TEXTURE\x0a\x20\x20\x20\x20uniform\x20sampler2D\x20uOcclusionTexture;\x0a#endif\x0a\x0a#ifdef\x20REFRACTION\x0a\x20\x20\x20\x20uniform\x20float\x20uIndexOfRefraction;\x0a#endif\x0a\x0a#ifdef\x20HAS_TRANSMISSION\x0a\x20\x20\x20\x20uniform\x20float\x20uTransmissionFactor;\x0a#endif\x0a\x0a#ifdef\x20HAS_WETNESS\x0a\x20\x20\x20\x20uniform\x20float\x20uWetnessFactor;\x0a#endif\x0a\x0a#ifdef\x20HAS_VOLUME\x0a\x20\x20\x20\x20uniform\x20vec4\x20uTintColor;\x0a\x20\x20\x20\x20uniform\x20vec4\x20uDiffusionDistance;\x0a\x20\x20\x20\x20uniform\x20float\x20uThickness;\x0a#endif\x0a\x0a#ifdef\x20HAS_CLEARCOAT\x0a\x20\x20\x20\x20uniform\x20float\x20uClearcoatFactor;\x0a\x20\x20\x20\x20uniform\x20float\x20uClearcoatRoughnessFactor;\x0a#endif\x0a\x0a//参考UE4.24实现计算精确光源的衰减\x0afloat\x20punctualLightIntensityToIrradianceFactor(\x20const\x20in\x20float\x20lightDistance,\x20const\x20in\x20float\x20cutoffDistance,\x20const\x20in\x20float\x20decayExponent\x20)\x20{\x0a\x20\x20\x20\x20float\x20d\x20=\x20lightDistance;\x0a\x20\x20\x20\x20float\x20r\x20=\x20cutoffDistance;\x0a\x20\x20\x20\x20float\x20d2\x20=\x20d\x20*\x20d;\x0a\x20\x20\x20\x20float\x20attenuation\x20=\x201.0\x20/\x20(d2\x20+\x201.0);\x0a\x20\x20\x20\x20float\x20m\x20=\x20saturate(1.0\x20-\x20pow(d\x20/\x20r,\x204.0));\x0a\x20\x20\x20\x20float\x20m2\x20=\x20m\x20*\x20m;\x0a\x20\x20\x20\x20return\x20attenuation\x20*\x20m2;\x0a}\x0a\x0a#include\x20<hemisphereLightDecl>\x0a#include\x20<directionLightDecl>\x0a#include\x20<pointLightDecl>\x0a#include\x20<spotLightDecl>\x0a#include\x20<snowDecl>\x0a#include\x20<rainDecl>\x0a\x0a#ifdef\x20HAS_ANISOTROPY\x0avec3\x20getAnisotropicBentNormals(const\x20vec3\x20T,\x20const\x20vec3\x20B,\x20const\x20vec3\x20N,\x20const\x20vec3\x20V,\x20float\x20anisotropy)\x20{\x0a\x20\x20\x20\x20vec3\x20anisotropicFrameDirection\x20=\x20anisotropy\x20>=\x200.0\x20?\x20B\x20:\x20T;\x0a\x20\x20\x20\x20vec3\x20anisotropicFrameTangent\x20=\x20cross(normalize(anisotropicFrameDirection),\x20V);\x0a\x20\x20\x20\x20vec3\x20anisotropicFrameNormal\x20=\x20cross(anisotropicFrameTangent,\x20anisotropicFrameDirection);\x0a\x20\x20\x20\x20vec3\x20anisotropicNormal\x20=\x20normalize(mix(N,\x20anisotropicFrameNormal,\x20abs(anisotropy)));\x0a\x20\x20\x20\x20return\x20anisotropicNormal;\x0a}\x0a#endif\x0a\x0a#ifdef\x20HAS_VOLUME\x0avec3\x20computeColorAtDistanceInMedia(vec3\x20color,\x20float\x20distance)\x20{\x0a\x20\x20\x20\x20return\x20-log(color)\x20/\x20distance;\x0a}\x0avec3\x20cocaLambert(vec3\x20alpha,\x20float\x20distance)\x20{\x0a\x20\x20\x20\x20return\x20exp(-alpha\x20*\x20distance);\x0a}\x0a#endif\x0a\x0a\x0avec3\x20sRGBToLinear(vec3\x20srgbIn)\x20\x0a{\x0a\x20\x20\x20\x20return\x20pow(srgbIn,\x20vec3(2.2));\x0a}\x0a\x0avec4\x20sRGBToLinear(vec4\x20srgbIn)\x0a{\x0a\x20\x20\x20\x20srgbIn\x20=\x20srgbIn\x20;\x0a\x20\x20\x20\x20vec3\x20linearOut\x20=\x20pow(srgbIn.rgb,\x20vec3(2.2));\x0a\x20\x20\x20\x20return\x20vec4(linearOut,\x20srgbIn.a);\x0a}\x0a\x0avec3\x20LinearTosRGB(vec3\x20linearIn)\x20\x0a{\x0a#ifndef\x20HDR\x20\x0a\x20\x20\x20\x20return\x20pow(linearIn,\x20vec3(1.0/2.2));\x0a#else\x20\x0a\x20\x20\x20\x20return\x20linearIn;\x0a#endif\x20\x0a}\x0a\x0avec3\x20lambertianDiffuse(vec3\x20diffuseColor)\x20\x0a{\x0a\x20\x20\x20\x20return\x20diffuseColor\x20*\x20RECIPROCAL_PI;\x0a}\x0a\x0avec3\x20applyTonemapping(vec3\x20linearIn)\x20\x0a{\x0a\x20\x20\x20\x20vec3\x20color\x20=\x20linearIn\x20;\x0a\x20\x20\x20\x20return\x20czm_acesTonemapping(color);\x0a}\x0a\x0avec3\x20F_Schlick(\x20const\x20in\x20vec3\x20f0,\x20const\x20in\x20float\x20f90,\x20const\x20in\x20float\x20dotVH\x20)\x20{\x0a\x20\x20\x20\x20float\x20fresnel\x20=\x20exp2(\x20(\x20-\x205.55473\x20*\x20dotVH\x20-\x206.98316\x20)\x20*\x20dotVH\x20);\x0a\x20\x20\x20\x20return\x20f0\x20*\x20(\x201.0\x20-\x20fresnel\x20)\x20+\x20(\x20f90\x20*\x20fresnel\x20);\x0a}\x0a\x0afloat\x20GeometrySchlickGGX(float\x20roughness,\x20float\x20NoV)\x0a{\x0a\x20\x20\x20\x20float\x20k\x20=\x20pow(roughness\x20+\x201.0,\x202.0)\x20/\x208.0;\x0a\x20\x20\x20\x20return\x20NoV\x20/\x20(NoV\x20*\x20(1.0\x20-\x20k)\x20+\x20k);\x0a}\x0a\x0afloat\x20D_GGX(\x20const\x20in\x20float\x20alpha,\x20const\x20in\x20float\x20dotNH\x20)\x20{\x0a\x20\x20\x20\x20float\x20a2\x20=\x20pow2(\x20alpha\x20);\x0a\x20\x20\x20\x20float\x20denom\x20=\x20pow2(\x20dotNH\x20)\x20*\x20(\x20a2\x20-\x201.0\x20)\x20+\x201.0;\x0a\x20\x20\x20\x20return\x20RECIPROCAL_PI\x20*\x20a2\x20/\x20pow2(\x20denom\x20);\x0a}\x0a\x0avec3\x20BRDF_GGX(\x20const\x20in\x20vec3\x20lightDir,\x20const\x20in\x20vec3\x20viewDir,\x20const\x20in\x20vec3\x20normal,\x20const\x20in\x20vec3\x20f0,\x20const\x20in\x20float\x20f90,\x20const\x20in\x20float\x20roughness\x20)\x20{\x0a\x20\x20\x20\x20float\x20alpha\x20=\x20roughness\x20*\x20roughness;\x0a\x20\x20\x20\x20vec3\x20halfDir\x20=\x20normalize(\x20lightDir\x20+\x20viewDir\x20);\x0a\x20\x20\x20\x20float\x20dotNL\x20=\x20clamp(\x20dot(\x20normal,\x20lightDir\x20),\x200.001,\x201.0\x20);\x0a\x20\x20\x20\x20float\x20dotNV\x20=\x20abs(\x20dot(\x20normal,\x20viewDir\x20)\x20)\x20+\x200.001;\x0a\x20\x20\x20\x20float\x20dotNH\x20=\x20saturate(\x20dot(\x20normal,\x20halfDir\x20)\x20);\x0a\x20\x20\x20\x20float\x20dotLH\x20=\x20saturate(\x20dot(\x20lightDir,\x20halfDir\x20)\x20);\x0a\x20\x20\x20\x20float\x20dotVH\x20=\x20saturate(\x20dot(\x20viewDir,\x20halfDir\x20)\x20);\x0a\x20\x20\x20\x20vec3\x20F\x20=\x20F_Schlick(\x20f0,\x20f90,\x20dotVH\x20);\x0a\x20\x20\x20\x20float\x20G\x20=\x20GeometrySchlickGGX(alpha,\x20dotNV)\x20*\x20GeometrySchlickGGX(alpha,\x20dotNL);\x0a\x20\x20\x20\x20float\x20D\x20=\x20D_GGX(\x20alpha,\x20dotNH\x20);\x0a\x20\x20\x20\x20return\x20F\x20*\x20(\x20G\x20*\x20D\x20)\x20/\x20(4.0\x20*\x20dotNL\x20*\x20dotNV);\x0a}\x0a\x0avoid\x20directPhysical(\x20const\x20in\x20IncidentLight\x20directLight,\x20const\x20in\x20GeometricContext\x20geometry,\x20const\x20in\x20PhysicalMaterial\x20material,\x20inout\x20ReflectedLight\x20reflectedLight\x20)\x20{\x0a\x20\x20\x20\x20float\x20dotNL\x20=\x20saturate(\x20dot(\x20geometry.normal,\x20directLight.direction\x20)\x20);\x0a\x20\x20\x20\x20vec3\x20irradiance\x20=\x20dotNL\x20*\x20directLight.color;\x0a\x20\x20\x20\x20reflectedLight.directSpecular\x20+=\x20irradiance\x20*\x20BRDF_GGX(\x20directLight.direction,\x20geometry.viewDir,\x20geometry.normal,\x20material.specularColor,\x20material.specularF90,\x20material.roughness\x20);\x0a\x20\x20\x20\x20reflectedLight.directDiffuse\x20+=\x20irradiance\x20*\x20lambertianDiffuse(\x20material.diffuseColor\x20);\x0a}\x0a\x0a#ifdef\x20HAS_NORMAL_TEXTURE\x0avec3\x20perturbNormal2Arb(\x20vec3\x20eye_pos,\x20vec3\x20surf_norm,\x20vec2\x20uv\x20)\x20{\x0a\x20\x20\x20\x20vec3\x20q0\x20=\x20vec3(\x20dFdx(\x20eye_pos.x\x20),\x20dFdx(\x20eye_pos.y\x20),\x20dFdx(\x20eye_pos.z\x20)\x20);\x0a\x20\x20\x20\x20vec3\x20q1\x20=\x20vec3(\x20dFdy(\x20eye_pos.x\x20),\x20dFdy(\x20eye_pos.y\x20),\x20dFdy(\x20eye_pos.z\x20)\x20);\x0a\x20\x20\x20\x20vec2\x20st0\x20=\x20dFdx(\x20uv.st\x20);\x0a\x20\x20\x20\x20vec2\x20st1\x20=\x20dFdy(\x20uv.st\x20);\x0a\x20\x20\x20\x20float\x20scale\x20=\x20sign(\x20st1.t\x20*\x20st0.s\x20-\x20st0.t\x20*\x20st1.s\x20);\x0a\x20\x20\x20\x20vec3\x20S\x20=\x20normalize(\x20(\x20q0\x20*\x20st1.t\x20-\x20q1\x20*\x20st0.t\x20)\x20*\x20scale\x20);\x0a\x20\x20\x20\x20vec3\x20T\x20=\x20normalize(\x20(\x20-\x20q0\x20*\x20st1.s\x20+\x20q1\x20*\x20st0.s\x20)\x20*\x20scale\x20);\x0a\x20\x20\x20\x20vec3\x20N\x20=\x20normalize(\x20surf_norm\x20);\x0a\x20\x20\x20\x20mat3\x20tsn\x20=\x20mat3(\x20S,\x20T,\x20N\x20);\x0a\x20\x20\x20\x20vec3\x20mapN\x20=\x20texture2D(\x20uNormalTexture,\x20uv.xy\x20).xyz\x20*\x202.0\x20-\x201.0;\x0a\x20\x20\x20\x20mapN.xy\x20*=\x20uNormalTextureScale;\x0a\x20\x20\x20\x20mapN.xy\x20*=\x20(\x20float(\x20gl_FrontFacing\x20)\x20*\x202.0\x20-\x201.0\x20);\x0a\x20\x20\x20\x20return\x20normalize(\x20tsn\x20*\x20mapN\x20);\x0a}\x0a#endif\x0a\x0a#include\x20<cubeUV_reflection>\x0a\x0avec3\x20inverseTransformDirection(\x20in\x20vec3\x20dir\x20)\x20{\x0a\x20\x20\x20\x20mat3\x20fixedToENU\x20=\x20mat3(czm_modelView[0][0],\x20czm_modelView[1][0],\x20czm_modelView[2][0],\x20czm_modelView[0][1],\x20czm_modelView[1][1],\x20czm_modelView[2][1],\x20czm_modelView[0][2],\x20czm_modelView[1][2],\x20czm_modelView[2][2]);\x0a\x20\x20\x20\x20const\x20mat3\x20yUpToZUp\x20=\x20mat3(1.0,\x200.0,\x200.0,\x200.0,\x200.0,\x20-1.0,\x200.0,\x201.0,\x200.0);\x0a\x20\x20\x20\x20return\x20normalize(\x20yUpToZUp\x20*\x20fixedToENU\x20*\x20dir\x20);\x0a}\x0a\x0avoid\x20indirectDiffuse_Physical(\x20const\x20in\x20vec3\x20irradiance,\x20const\x20in\x20GeometricContext\x20geometry,\x20const\x20in\x20PhysicalMaterial\x20material,\x20inout\x20ReflectedLight\x20reflectedLight\x20)\x20{\x0a\x20\x20\x20\x20reflectedLight.indirectDiffuse\x20+=\x20irradiance\x20*\x20lambertianDiffuse(\x20material.diffuseColor\x20);\x0a}\x0a\x0avec2\x20DFGApprox(\x20const\x20in\x20vec3\x20normal,\x20const\x20in\x20vec3\x20viewDir,\x20const\x20in\x20float\x20roughness\x20)\x20{\x0a\x20\x20\x20\x20float\x20dotNV\x20=\x20saturate(\x20dot(\x20normal,\x20viewDir\x20)\x20);\x0a\x20\x20\x20\x20const\x20vec4\x20c0\x20=\x20vec4(\x20-\x201,\x20-\x200.0275,\x20-\x200.572,\x200.022\x20);\x0a\x20\x20\x20\x20const\x20vec4\x20c1\x20=\x20vec4(\x201,\x200.0425,\x201.04,\x20-\x200.04\x20);\x0a\x20\x20\x20\x20vec4\x20r\x20=\x20roughness\x20*\x20c0\x20+\x20c1;\x0a\x20\x20\x20\x20float\x20a004\x20=\x20min(\x20r.x\x20*\x20r.x,\x20exp2(\x20-\x209.28\x20*\x20dotNV\x20)\x20)\x20*\x20r.x\x20+\x20r.y;\x0a\x20\x20\x20\x20vec2\x20fab\x20=\x20vec2(\x20-\x201.04,\x201.04\x20)\x20*\x20a004\x20+\x20r.zw;\x0a\x20\x20\x20\x20return\x20fab;\x0a}\x0a\x0avoid\x20computeMultiscattering(\x20const\x20in\x20vec3\x20normal,\x20const\x20in\x20vec3\x20viewDir,\x20const\x20in\x20vec3\x20specularColor,\x20const\x20in\x20float\x20specularF90,\x20const\x20in\x20float\x20roughness,\x20inout\x20vec3\x20singleScatter,\x20inout\x20vec3\x20multiScatter\x20)\x20{\x0a\x20\x20\x20\x20vec2\x20fab\x20=\x20DFGApprox(\x20normal,\x20viewDir,\x20roughness\x20);\x0a\x20\x20\x20\x20vec3\x20Fr\x20=\x20specularColor;\x0a\x20\x20\x20\x20vec3\x20FssEss\x20=\x20Fr\x20*\x20fab.x\x20+\x20specularF90\x20*\x20fab.y;\x0a\x20\x20\x20\x20float\x20Ess\x20=\x20fab.x\x20+\x20fab.y;\x0a\x20\x20\x20\x20float\x20Ems\x20=\x201.0\x20-\x20Ess;\x0a\x20\x20\x20\x20vec3\x20Favg\x20=\x20Fr\x20+\x20(\x201.0\x20-\x20Fr\x20)\x20*\x200.047619;\x0a\x20\x20\x20\x20vec3\x20Fms\x20=\x20FssEss\x20*\x20Favg\x20/\x20(\x201.0\x20-\x20Ems\x20*\x20Favg\x20);\x0a\x20\x20\x20\x20singleScatter\x20+=\x20FssEss;\x0a\x20\x20\x20\x20multiScatter\x20+=\x20Fms\x20*\x20Ems;\x0a}\x0a\x0avoid\x20indirectSpecular_Physical(\x20const\x20in\x20vec3\x20radiance,\x20const\x20in\x20vec3\x20irradiance,\x20const\x20in\x20GeometricContext\x20geometry,\x20const\x20in\x20PhysicalMaterial\x20material,\x20inout\x20ReflectedLight\x20reflectedLight\x20)\x20{\x0a\x20\x20\x20\x20vec3\x20singleScattering\x20=\x20vec3(\x200.0\x20);\x0a\x20\x20\x20\x20vec3\x20multiScattering\x20=\x20vec3(\x200.0\x20);\x0a\x20\x20\x20\x20vec3\x20cosineWeightedIrradiance\x20=\x20irradiance;\x0a\x20\x20\x20\x20computeMultiscattering(\x20geometry.normal,\x20geometry.viewDir,\x20material.specularColor,\x20material.specularF90,\x20material.roughness,\x20singleScattering,\x20multiScattering\x20);\x0a\x20\x20\x20\x20vec3\x20totalScattering\x20=\x20singleScattering\x20+\x20multiScattering;\x0a\x20\x20\x20\x20vec3\x20diffuse\x20=\x20material.diffuseColor\x20*\x20(\x201.0\x20-\x20max(\x20max(\x20totalScattering.r,\x20totalScattering.g\x20),\x20totalScattering.b\x20)\x20);\x0a\x20\x20\x20\x20reflectedLight.indirectSpecular\x20+=\x20radiance\x20*\x20singleScattering;\x0a\x20\x20\x20\x20reflectedLight.indirectSpecular\x20+=\x20multiScattering\x20*\x20cosineWeightedIrradiance;\x0a\x20\x20\x20\x20reflectedLight.indirectDiffuse\x20+=\x20diffuse\x20*\x20cosineWeightedIrradiance;\x0a}\x0a\x0a//\x20vec3\x20getIBLIrradiance(\x20const\x20in\x20vec3\x20normal\x20)\x20{\x0a//\x20\x20\x20\x20\x20vec3\x20worldNormal\x20=\x20inverseTransformDirection(\x20normal\x20);\x0a//\x20\x20\x20\x20\x20vec4\x20envMapColor\x20=\x20textureCubeUV(\x20czm_hdrEnvMap,\x20worldNormal,\x201.0\x20);\x0a//\x20\x20\x20\x20\x20return\x20envMapColor.rgb;\x0a//\x20}\x0a\x0a//\x20vec3\x20getIBLRadiance(\x20const\x20in\x20vec3\x20viewDir,\x20const\x20in\x20vec3\x20normal,\x20const\x20in\x20float\x20roughness\x20)\x20{\x0a//\x20\x20\x20\x20\x20vec3\x20reflectVec\x20=\x20reflect(\x20-\x20viewDir,\x20normal\x20);\x0a//\x20\x20\x20\x20\x20reflectVec\x20=\x20normalize(\x20mix(\x20reflectVec,\x20normal,\x20roughness\x20*\x20roughness)\x20);\x0a//\x20\x20\x20\x20\x20reflectVec\x20=\x20inverseTransformDirection(\x20reflectVec\x20);\x0a//\x20\x20\x20\x20\x20vec4\x20envMapColor\x20=\x20textureCubeUV(\x20czm_hdrEnvMap,\x20reflectVec,\x20roughness\x20);\x0a//\x20\x20\x20\x20\x20return\x20envMapColor.rgb;\x0a//\x20}\x0a\x0afloat\x20computeSpecularOcclusion(\x20const\x20in\x20float\x20dotNV,\x20const\x20in\x20float\x20ambientOcclusion,\x20const\x20in\x20float\x20roughness\x20)\x20{\x0a\x20\x20\x20\x20return\x20saturate(\x20pow(\x20dotNV\x20+\x20ambientOcclusion,\x20exp2(\x20-\x2016.0\x20*\x20roughness\x20-\x201.0\x20)\x20)\x20-\x201.0\x20+\x20ambientOcclusion\x20);\x0a}\x0a\x0avec4\x20brdf(in\x20vec4\x20baseColorWithAlpha,\x20vec2\x20texCoord,\x20vec2\x20oriTexCoord,\x20vec3\x20posEC,\x20vec3\x20posMC,\x20vec3\x20vertexNormalEC,\x20vec4\x20sunLightColor)\x20{\x0a#ifndef\x20USE_BatchPBR\x0a\x20\x20\x20\x20baseColorWithAlpha\x20=\x20baseColorWithAlpha\x20*\x20uBaseColorFactor;\x0a#endif\x0a#ifdef\x20BaseColorReplace\x0a\x20\x20\x20\x20baseColorWithAlpha\x20=\x20uBaseColorFactor;\x0a#endif\x0a\x20\x20\x20\x20float\x20faceDirection\x20=\x20gl_FrontFacing\x20?\x201.0\x20:\x20-\x201.0;\x0a\x20\x20\x20\x20vec3\x20ng\x20=\x20length(vertexNormalEC)\x20<\x200.1\x20?\x20normalize(czm_normal\x20*\x20computeNormal(posMC.xyz))\x20:\x20normalize(vertexNormalEC);\x0a\x20\x20\x20\x20ng\x20=\x20ng\x20*\x20faceDirection;\x0a#ifdef\x20HAS_BASE_TEXTURE\x0a\x20\x20\x20\x20baseColorWithAlpha\x20=\x20texture2D(uBaseTexture,\x20oriTexCoord);\x0a\x20\x20\x20\x20baseColorWithAlpha\x20=\x20sRGBToLinear(baseColorWithAlpha)\x20*\x20uBaseColorFactor;\x0a#endif\x0a#ifdef\x20HAS_NORMAL_TEXTURE\x0a\x20\x20\x20\x20vec3\x20n\x20=\x20perturbNormal2Arb(posEC,\x20ng,\x20oriTexCoord);\x0a#ifdef\x20HAS_ANISOTROPY\x0a\x20\x20\x20\x20float\x20anisotropy\x20=\x20uAnisotropy.b;\x0a\x20\x20\x20\x20vec3\x20anisotropyDirection\x20=\x20vec3(uAnisotropy.xy,\x200.0);\x0a\x20\x20\x20\x20vec3\x20anisotropicTangent\x20=\x20normalize(tbn\x20*\x20anisotropyDirection);\x0a\x20\x20\x20\x20vec3\x20anisotropicBitangent\x20=\x20normalize(cross(tbn[2],\x20anisotropicTangent));\x0a\x20\x20\x20\x20n\x20=\x20getAnisotropicBentNormals(anisotropicTangent,\x20anisotropicBitangent,\x20n,\x20v,\x20anisotropy);\x0a#endif\x0a#else\x0a\x20\x20\x20\x20vec3\x20n\x20=\x20ng;\x0a#endif\x0a#ifdef\x20HAS_WETNESS\x0a\x20\x20\x20\x20mat3\x20fixedToENU_wetness\x20=\x20mat3(czm_modelView[0][0],\x20czm_modelView[1][0],\x20czm_modelView[2][0],\x20czm_modelView[0][1],\x20czm_modelView[1][1],\x20czm_modelView[2][1],\x20czm_modelView[0][2],\x20czm_modelView[1][2],\x20czm_modelView[2][2]);\x0a\x20\x20\x20\x20vec3\x20normalWS_wetness\x20=\x20normalize(fixedToENU_wetness\x20*\x20n);\x0a#endif\x0a#ifdef\x20HAS_RAIN\x0a\x20\x20\x20\x20n\x20=\x20rippleGenerator(uRippleTexture,uAnimationSpeed,normalWS_wetness,uWetnessFactor);\x0a#endif\x0a\x20\x20\x20\x20vec3\x20baseColor\x20=\x20baseColorWithAlpha.rgb;\x0a\x20\x20\x20\x20float\x20roughness\x20=\x20uRoughnessFactor;\x0a\x20\x20\x20\x20float\x20metalness\x20=\x20uMetallicFactor;\x0a\x20\x20\x20\x20vec4\x20emissiveFactor\x20=\x20uEmissiveFactor;\x0a\x20\x20\x20\x20vec2\x20emissiveTexCoord\x20=\x20texCoord.xy;\x0a#ifdef\x20PBR_THEME\x0a\x20\x20\x20\x20int\x20pbrIndex\x20=\x20int(vPBRIndex);\x0a\x20\x20\x20\x20if(vPBRIndex\x20<\x200.0)\x0a\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20baseColorWithAlpha;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20mat4\x20pbrPar\x20=\x20mat4(0.0);\x0a\x20\x20\x20\x20for(int\x20i\x20=\x200;i\x20<\x20NUM_PBR_MATERIALS;i++)\x0a\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20if(i\x20==\x20pbrIndex)\x0a\x20\x20\x20\x20\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20pbrPar\x20=\x20uPBRMaterials[i];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20break;\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20roughness\x20=\x20clamp(pbrPar[0][0],\x200.04,\x201.0);\x0a\x20\x20\x20\x20metalness\x20=\x20clamp(pbrPar[0][1],\x200.0,\x201.0);\x0a\x20\x20\x20\x20baseColor\x20=\x20(baseColorWithAlpha\x20/\x20uBaseColorFactor\x20*\x20vec4(pbrPar[0][2],\x20pbrPar[0][3],\x20pbrPar[1][0],\x20pbrPar[1][1])).rgb;\x0a#endif\x0a#ifdef\x20USE_BatchPBR\x0a\x20\x20\x20\x20metalness\x20=\x20vMetallicRoughness.x;\x0a\x20\x20\x20\x20roughness\x20=\x20vMetallicRoughness.y;\x0a\x20\x20\x20\x20emissiveFactor\x20=\x20vEmissiveFactor;\x0a\x20\x20\x20\x20emissiveTexCoord\x20=\x20texCoord.xy;\x0a#endif\x0a\x20\x20\x20\x20metalness\x20=\x20clamp(metalness,\x200.0,\x201.0);\x0a\x20\x20\x20\x20roughness\x20=\x20clamp(roughness,\x200.0,\x201.0);\x0a\x20\x20\x20\x20\x0a#ifdef\x20HAS_MetallicRoughness_TEXTURE\x0a\x20\x20\x20\x20vec3\x20metallicRoughness\x20=\x20texture2D(uMetallicRoughnessTexture,\x20oriTexCoord).rgb;\x0a\x20\x20\x20\x20metalness\x20=\x20clamp(metalness\x20*\x20metallicRoughness.r,\x200.0,\x201.0);\x0a\x20\x20\x20\x20roughness\x20=\x20clamp(roughness\x20*\x20metallicRoughness.g,\x200.04,\x201.0);\x0a#ifdef\x20HAS_WETNESS\x0a\x20\x20\x20\x20float\x20fWetness\x20=\x20clamp(uWetnessFactor,0.0,1.0);\x0a\x20\x20\x20\x20float\x20fWetness_correction\x20=\x20pow(4.0*fWetness,2.0);\x0a\x20\x20\x20\x20fWetness_correction\x20=\x20clamp(fWetness_correction,clamp(fWetness,0.0,0.9),1.0);\x0a\x20\x20\x20\x20float\x20fWerness_normalized\x20=\x20fWetness_correction\x20*\x20clamp(normalWS_wetness.z\x20+\x200.85,0.0,1.0);\x0a\x20\x20\x20\x20baseColor\x20=\x20mix(baseColor,baseColor*0.7,fWerness_normalized);\x0a\x20\x20\x20\x20roughness\x20=\x20mix(roughness,0.05,fWerness_normalized);\x0a#endif\x0a#ifdef\x20HAS_SNOW\x0a\x20\x20\x20\x20mat3\x20fixedToENU_snow\x20=\x20mat3(czm_modelView[0][0],\x20czm_modelView[1][0],\x20czm_modelView[2][0],\x20czm_modelView[0][1],\x20czm_modelView[1][1],\x20czm_modelView[2][1],\x20czm_modelView[0][2],\x20czm_modelView[1][2],\x20czm_modelView[2][2]);\x0a\x20\x20\x20\x20vec3\x20normalWS_snow\x20=\x20normalize(fixedToENU_snow\x20*\x20n);\x0a\x20\x20\x20\x20snowGenerator(uSnowMaskTexture,uSnowNormalTexture,\x20oriTexCoord,uSnowCoverageFactor,normalWS_snow,baseColor,roughness);\x0a#endif\x0a#endif\x0a\x0a\x20\x20\x20\x20vec3\x20lightColorHdr\x20=\x20vec3(2.0)\x20*\x20sunLightColor.rgb;\x0a\x20\x20\x20\x20vec3\x20l\x20=\x20normalize(czm_lightDirectionEC);\x0a\x20\x20\x20\x20vec3\x20v\x20=\x20-normalize(posEC);\x0a\x20\x20\x20\x20vec3\x20h\x20=\x20normalize(v\x20+\x20l);\x0a\x20\x20\x20\x20vec3\x20f0\x20=\x20vec3(0.04);\x0a\x20\x20\x20\x20vec3\x20diffuseColor\x20=\x20baseColor\x20*\x20(1.0\x20-\x20metalness)\x20*\x20(1.0\x20-\x20f0);\x0a\x20\x20\x20\x20vec3\x20specularColor\x20=\x20mix(f0,\x20baseColor,\x20metalness);\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20float\x20alpha\x20=\x20roughness\x20*\x20roughness;\x0a\x20\x20\x20\x20float\x20dotNL\x20=\x20clamp(\x20dot(\x20n,\x20l\x20),\x200.001,\x201.0\x20);\x0a\x20\x20\x20\x20float\x20dotNV\x20=\x20abs(\x20dot(\x20n,\x20v\x20)\x20)\x20+\x200.001;\x0a\x20\x20\x20\x20float\x20dotNH\x20=\x20saturate(\x20dot(\x20n,\x20h\x20)\x20);\x0a\x20\x20\x20\x20float\x20dotLH\x20=\x20saturate(\x20dot(\x20l,\x20h\x20)\x20);\x0a\x20\x20\x20\x20float\x20dotVH\x20=\x20saturate(\x20dot(\x20v,\x20h\x20)\x20);\x0a\x20\x20\x20\x20float\x20reflectance\x20=\x20max(max(specularColor.r,\x20specularColor.g),\x20specularColor.b);\x0a\x20\x20\x20\x20float\x20f90\x20=\x20clamp(reflectance\x20*\x2025.0,\x200.0,\x201.0);\x0a\x20\x20\x20\x20vec3\x20F\x20=\x20F_Schlick(\x20specularColor,\x20f90,\x20dotVH\x20);\x0a\x20\x20\x20\x20float\x20G\x20=\x20GeometrySchlickGGX(alpha,\x20dotNV)\x20*\x20GeometrySchlickGGX(alpha,\x20dotNL);\x0a\x20\x20\x20\x20float\x20D\x20=\x20D_GGX(\x20alpha,\x20dotNH\x20);\x0a\x20\x20\x20\x20vec3\x20diffuseContribution\x20=\x20(1.0\x20-\x20F)\x20*\x20lambertianDiffuse(diffuseColor);\x0a\x20\x20\x20\x20vec3\x20specularContribution\x20=\x20F\x20*\x20G\x20*\x20D\x20/\x20(4.0\x20*\x20dotNL\x20*\x20dotNV);\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20vec3\x20geometryNormal\x20=\x20ng;\x0a\x20\x20\x20\x20PhysicalMaterial\x20material;\x0a\x20\x20\x20\x20material.diffuseColor\x20=\x20diffuseColor;\x0a\x20\x20\x20\x20vec3\x20dxy\x20=\x20max(\x20abs(\x20dFdx(\x20geometryNormal\x20)\x20),\x20abs(\x20dFdy(\x20geometryNormal\x20)\x20)\x20);\x0a\x20\x20\x20\x20float\x20geometryRoughness\x20=\x20max(\x20max(\x20dxy.x,\x20dxy.y\x20),\x20dxy.z\x20);\x0a\x20\x20\x20\x20material.roughness\x20=\x20max(\x20roughness,\x200.0525\x20);\x0a\x20\x20\x20\x20material.roughness\x20+=\x20geometryRoughness;\x0a\x20\x20\x20\x20material.roughness\x20=\x20min(\x20material.roughness,\x201.0\x20);\x0a\x20\x20\x20\x20material.specularColor\x20=\x20specularColor;\x0a\x20\x20\x20\x20material.specularF90\x20=\x201.0;\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20GeometricContext\x20geometry;\x0a\x20\x20\x20\x20geometry.position\x20=\x20posEC;\x0a\x20\x20\x20\x20geometry.normal\x20=\x20n;\x0a\x20\x20\x20\x20geometry.viewDir\x20=\x20v;\x0a\x20\x20\x20\x20ReflectedLight\x20reflectedLight\x20=\x20ReflectedLight(\x20vec3(\x200.0\x20),\x20vec3(\x200.0\x20),\x20vec3(\x200.0\x20),\x20vec3(\x200.0\x20)\x20);\x0a\x20\x20\x20\x20reflectedLight.directDiffuse\x20+=\x20dotNL\x20*\x20lightColorHdr\x20*\x20diffuseContribution;\x0a\x20\x20\x20\x20reflectedLight.directSpecular\x20+=\x20dotNL\x20*\x20lightColorHdr\x20*\x20specularContribution;\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20IncidentLight\x20directLight;\x20\x0a\x20\x20\x20\x20#include\x20<lightSourceImpl>\x0a\x20\x20\x20\x20\x0a\x20\x20\x20\x20vec3\x20irradiance\x20=\x20vec3(0.0);\x0a\x20\x20\x20\x20vec3\x20radiance\x20=\x20vec3(0.0);\x0a\x20\x20\x0a#ifdef\x20HAS_HEMISPHERE_LIGHTS\x0a\x20\x20\x20\x20HemisphereLight\x20hemiLight;\x0a\x20\x20\x20\x20hemiLight.skyColor\x20=\x20uSkyColor[0];\x0a\x20\x20\x20\x20hemiLight.groundColor\x20=\x20uGroundColor[0];\x0a\x20\x20\x20\x20hemiLight.direction\x20=\x20normalize(czm_normal\x20*\x20vec3(0.0,\x200.0,\x201.0));\x0a\x20\x20\x20\x20irradiance\x20+=\x20getHemisphereLightIrradiance(\x20hemiLight,\x20geometry\x20);\x0a#endif\x0a\x0a#ifdef\x20IBL\x0a\x0a#ifdef\x20KtxEnvMap\x0a\x20\x20\x20\x20mat3\x20fixedToENU\x20=\x20mat3(czm_modelView[0][0],\x20czm_modelView[1][0],\x20czm_modelView[2][0],\x20czm_modelView[0][1],\x20czm_modelView[1][1],\x20czm_modelView[2][1],\x20czm_modelView[0][2],\x20czm_modelView[1][2],\x20czm_modelView[2][2]);\x0a\x20\x20\x20\x20const\x20mat3\x20yUpToZUp\x20=\x20mat3(-1.0,\x200.0,\x200.0,\x200.0,\x200.0,\x20-1.0,\x200.0,\x201.0,\x200.0);\x0a\x20\x20\x20\x20vec3\x20cubeDir\x20=\x20normalize(\x20yUpToZUp\x20*\x20fixedToENU\x20*\x20reflect(-v,\x20n)\x20);\x0a\x20\x20\x20\x20vec3\x20worldNormal\x20=\x20normalize(\x20yUpToZUp\x20*\x20fixedToENU\x20*\x20n\x20);\x0a\x20\x20\x20\x20irradiance\x20=\x20czm_sphericalHarmonics(worldNormal,\x20czm_sphericalHarmonicCoefficients);\x0a\x20\x20\x20\x20radiance\x20=\x20czm_sampleOctahedralProjection(czm_specularEnvironmentMaps,\x20czm_specularEnvironmentMapSize,\x20cubeDir,\x20\x20roughness\x20*\x20czm_specularEnvironmentMapsMaximumLOD,\x20czm_specularEnvironmentMapsMaximumLOD);\x0a#else\x0a\x20\x20\x20\x20//\x20irradiance\x20+=\x20getIBLIrradiance(\x20geometry.normal\x20);\x0a\x20\x20\x20\x20//\x20radiance\x20+=\x20getIBLRadiance(\x20geometry.viewDir,\x20geometry.normal,\x20material.roughness\x20);\x0a#endif\x0a\x20\x20\x20\x20\x0a#else\x0a\x20\x20\x20\x20vec3\x20positionWC\x20=\x20vec3(czm_inverseView\x20*\x20vec4(posEC,\x201.0));\x0a\x20\x20\x20\x20vec3\x20r\x20=\x20normalize(czm_inverseViewRotation\x20*\x20normalize(reflect(v,\x20n)));\x0a\x20\x20\x20\x20float\x20vertexRadius\x20=\x20length(positionWC);\x0a\x20\x20\x20\x20float\x20horizonDotNadir\x20=\x201.0\x20-\x20min(1.0,\x20czm_ellipsoidRadii.x\x20/\x20vertexRadius);\x0a\x20\x20\x20\x20float\x20reflectionDotNadir\x20=\x20dot(r,\x20normalize(positionWC));\x0a\x20\x20\x20\x20r.x\x20=\x20-r.x;\x0a\x20\x20\x20\x20r\x20=\x20-normalize(czm_temeToPseudoFixed\x20*\x20r);\x0a\x20\x20\x20\x20r.x\x20=\x20-r.x;\x0a\x20\x20\x20\x20float\x20inverseRoughness\x20=\x201.04\x20-\x20roughness;\x0a\x20\x20\x20\x20inverseRoughness\x20*=\x20inverseRoughness;\x0a\x20\x20\x20\x20vec3\x20sceneSkyBox\x20=\x20textureCube(czm_environmentMap,\x20r).rgb\x20*\x20inverseRoughness;\x0a\x20\x20\x20\x20float\x20atmosphereHeight\x20=\x200.05;\x0a\x20\x20\x20\x20float\x20blendRegionSize\x20=\x200.1\x20*\x20((1.0\x20-\x20inverseRoughness)\x20*\x208.0\x20+\x201.1\x20-\x20horizonDotNadir);\x0a\x20\x20\x20\x20float\x20blendRegionOffset\x20=\x20roughness\x20*\x20-1.0;\x0a\x20\x20\x20\x20float\x20farAboveHorizon\x20=\x20clamp(horizonDotNadir\x20-\x20blendRegionSize\x20*\x200.5\x20+\x20blendRegionOffset,\x201.0e-10\x20-\x20blendRegionSize,\x200.99999);\x0a\x20\x20\x20\x20float\x20aroundHorizon\x20=\x20clamp(horizonDotNadir\x20+\x20blendRegionSize\x20*\x200.5,\x201.0e-10\x20-\x20blendRegionSize,\x200.99999);\x0a\x20\x20\x20\x20float\x20farBelowHorizon\x20=\x20clamp(horizonDotNadir\x20+\x20blendRegionSize\x20*\x201.5,\x201.0e-10\x20-\x20blendRegionSize,\x200.99999);\x0a\x20\x20\x20\x20float\x20smoothstepHeight\x20=\x20smoothstep(0.0,\x20atmosphereHeight,\x20horizonDotNadir);\x0a\x20\x20\x20\x20vec3\x20belowHorizonColor\x20=\x20mix(vec3(0.1,\x200.15,\x200.25),\x20vec3(0.4,\x200.7,\x200.9),\x20smoothstepHeight);\x0a\x20\x20\x20\x20vec3\x20nadirColor\x20=\x20belowHorizonColor\x20*\x200.5;\x0a\x20\x20\x20\x20vec3\x20aboveHorizonColor\x20=\x20mix(vec3(0.9,\x201.0,\x201.2),\x20belowHorizonColor,\x20roughness\x20*\x200.5);\x0a\x20\x20\x20\x20vec3\x20blueSkyColor\x20=\x20mix(vec3(0.18,\x200.26,\x200.48),\x20aboveHorizonColor,\x20reflectionDotNadir\x20*\x20inverseRoughness\x20*\x200.5\x20+\x200.75);\x0a\x20\x20\x20\x20vec3\x20zenithColor\x20=\x20mix(blueSkyColor,\x20sceneSkyBox,\x20smoothstepHeight);\x0a\x20\x20\x20\x20vec3\x20blueSkyDiffuseColor\x20=\x20vec3(0.7,\x200.85,\x200.9);\x0a\x20\x20\x20\x20float\x20diffuseIrradianceFromEarth\x20=\x20(1.0\x20-\x20horizonDotNadir)\x20*\x20(reflectionDotNadir\x20*\x200.25\x20+\x200.75)\x20*\x20smoothstepHeight;\x0a\x20\x20\x20\x20float\x20diffuseIrradianceFromSky\x20=\x20(1.0\x20-\x20smoothstepHeight)\x20*\x20(1.0\x20-\x20(reflectionDotNadir\x20*\x200.25\x20+\x200.25));\x0a\x20\x20\x20\x20vec3\x20diffuseIrradiance\x20=\x20blueSkyDiffuseColor\x20*\x20clamp(diffuseIrradianceFromEarth\x20+\x20diffuseIrradianceFromSky,\x200.0,\x201.0);\x0a\x20\x20\x20\x20float\x20notDistantRough\x20=\x20(1.0\x20-\x20horizonDotNadir\x20*\x20roughness\x20*\x200.8);\x0a\x20\x20\x20\x20vec3\x20specularIrradiance\x20=\x20mix(zenithColor,\x20aboveHorizonColor,\x20smoothstep(farAboveHorizon,\x20aroundHorizon,\x20reflectionDotNadir)\x20*\x20notDistantRough);\x0a\x20\x20\x20\x20specularIrradiance\x20=\x20mix(specularIrradiance,\x20belowHorizonColor,\x20smoothstep(aroundHorizon,\x20farBelowHorizon,\x20reflectionDotNadir)\x20*\x20inverseRoughness);\x0a\x20\x20\x20\x20specularIrradiance\x20=\x20mix(specularIrradiance,\x20nadirColor,\x20smoothstep(farBelowHorizon,\x201.0,\x20reflectionDotNadir)\x20*\x20inverseRoughness);\x0a\x20\x20\x20\x20irradiance\x20=\x20diffuseIrradiance;\x0a\x20\x20\x20\x20radiance\x20=\x20specularIrradiance;\x0a#endif\x0a\x0a\x20\x20\x20\x20indirectSpecular_Physical(radiance,\x20irradiance,\x20geometry,\x20material,\x20reflectedLight);\x0a\x0a#ifdef\x20HAS_OCCLUSION_TEXTURE\x0a\x20\x20\x20\x20float\x20ambientOcclusion\x20=\x20texture2D(uOcclusionTexture,\x20oriTexCoord.xy).r;\x0a\x20\x20\x20\x20reflectedLight.indirectDiffuse\x20*=\x20ambientOcclusion;\x0a#ifdef\x20IBL\x0a\x20\x20\x20\x20reflectedLight.indirectSpecular\x20*=\x20computeSpecularOcclusion(\x20dotNV,\x20ambientOcclusion,\x20material.roughness\x20);\x0a#endif\x0a#endif\x0a\x0avec3\x20color\x20=\x20reflectedLight.directDiffuse\x20+\x20reflectedLight.directSpecular\x20+\x20reflectedLight.indirectDiffuse\x20+\x20reflectedLight.indirectSpecular;\x0a\x0a#ifdef\x20HAS_EMISSIVE_TEXTURE\x0a\x20\x20\x20\x20emissiveTexCoord\x20=\x20emissiveTexCoord\x20*\x20uEmissiveUVOffsetAndTiling.zw\x20+\x20uEmissiveUVOffsetAndTiling.xy;\x0a\x20\x20\x20\x20vec3\x20emissive\x20=\x20texture2D(uEmissionTexture,\x20emissiveTexCoord).rgb;\x0a\x20\x20\x20\x20emissive\x20*=\x20emissiveFactor.rgb;\x0a\x20\x20\x20\x20color\x20+=\x20emissive;\x0a#else\x0a\x20\x20\x20\x20color\x20+=\x20emissiveFactor.rgb;\x0a#endif\x0a\x0a\x20\x20\x20\x20color\x20=\x20applyTonemapping(color);\x0a\x20\x20\x20\x20color\x20=\x20LinearTosRGB(color);\x0a\x20\x20\x20\x20\x0a#ifdef\x20MASK\x0a\x20\x20\x20\x20if\x20(baseColorWithAlpha.a\x20<\x20uAlphaCutoff)\x0a\x20\x20\x20\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20discard;\x0a\x20\x20\x20\x20}\x0a\x20\x20\x20\x20return\x20vec4(color.rgb,\x201.0);\x0a#endif\x0a\x20\x20\x20\x20return\x20vec4(color.rgb,\x20baseColorWithAlpha.a);\x0a}\x0a#endif\x0a';